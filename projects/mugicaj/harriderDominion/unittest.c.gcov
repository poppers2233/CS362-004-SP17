        -:    0:Source:unittest.c
        -:    0:Graph:unittest.gcno
        -:    0:Data:unittest.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    0:Source is newer than graph
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <assert.h>
        -:    5:#include <stdio.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:
function main called 2 returned 100% blocks executed 83%
        2:   10:int main(int argc, char *argv[]){
        -:   11:	
        2:   12:	printf("Unit test 1:  intializeGame");
call    0 returned 100%
        -:   13:	
        2:   14:	int players = atoi(argv[1]);	
call    0 returned 100%
        -:   15:	struct gameState G;
        -:   16:	
        2:   17:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   18:	       remodel, smithy, village, baron, great_hall};
        -:   19:	int check;	
        2:   20:	check = initializeGame(players,k,1,&G);
call    0 returned 100%
        -:   21:
        2:   22:	printf("#players in : %i\n",players);
call    0 returned 100%
        2:   23:	printf("#Kingdom cards in: 10\n");
call    0 returned 100%
        -:   24:	
        -:   25:	int results[18];
        2:   26:	printf("0 = numPlayers\n");
call    0 returned 100%
        2:   27:	printf("1 = supplyCount ->Size\n");
call    0 returned 100%
        2:   28:	printf("2 = EmbargoTokens ->Size\n");
call    0 returned 100%
        2:   29:	printf("3 = outPostPlayed\n");
call    0 returned 100%
        2:   30:	printf("4 = outPostTurn\n");
call    0 returned 100%
        2:   31:	printf("5 = whoseTurn\n");
call    0 returned 100%
        2:   32:	printf("6 = phase\n");
call    0 returned 100%
        2:   33:	printf("7 = numActions\n");
call    0 returned 100%
        2:   34:	printf("8 = coins\n");
call    0 returned 100%
        2:   35:	printf("9 = hand->size\n");
call    0 returned 100%
        2:   36:	printf("10 = handCount->size\n");
call    0 returned 100%
        2:   37:	printf("11 = deck->size\n");
call    0 returned 100%
        2:   38:	printf("12 = deckCount->size\n");
call    0 returned 100%
        2:   39:	printf("13 = discard->size\n");
call    0 returned 100%
        2:   40:	printf("14 = discardCount->size\n");
call    0 returned 100%
        2:   41:	printf("15 = numBuys\n");
call    0 returned 100%
        2:   42:	printf("16 = playedCard->size\n");
call    0 returned 100%
        2:   43:	printf("17 = playedCcardCount\n");
call    0 returned 100%
        -:   44:
        2:   45:	results[0] = G.numPlayers;
        2:   46:	results[1] = sizeof(G.supplyCount)/4;	
        2:   47:	results[2] = sizeof(G.embargoTokens)/4;
        2:   48:	results[3] = G.outpostPlayed;
        2:   49:	results[4] = G.outpostTurn;
        2:   50:	results[5] = G.whoseTurn;
        2:   51:	results[6] = G.phase;
        2:   52:	results[7] = G.numActions;
        2:   53:	results[8] = G.coins;
        2:   54:	results[9] = sizeof(G.hand[0])/4;
        2:   55:	results[10] = sizeof(G.handCount)/4;
        2:   56:	results[11] = sizeof(G.deck[0])/4;
        2:   57:	results[12] = sizeof(G.deckCount)/4;
        2:   58:	results[13] = sizeof(G.discard[0])/4;
        2:   59:	results[14] = sizeof(G.discardCount)/4;
        2:   60:	results[15] = G.numBuys;
        2:   61:	results[16] = sizeof(G.playedCards)/4;
        2:   62:	results[17] = G.playedCardCount;
        -:   63:
        2:   64:	if(check != 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   65:		int i=0;
        -:   66:		
    #####:   67:		for(i=0;i<18; i++){
branch  0 never executed
branch  1 never executed
    #####:   68:			printf("%i : %i ",i,results[i]);
call    0 never executed
    #####:   69:			printf("----->\n");
call    0 never executed
        -:   70:		}
    #####:   71:		return -1;
        -:   72:	}
        -:   73:	else{
        2:   74:		printf("ALL TEST PASS\n");
call    0 returned 100%
        -:   75:	}
        -:   76:	
        2:   77:	printf("\n\n\n");
call    0 returned 100%
        2:   78:	return 0;
        -:   79:}

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    0:Source is newer than graph
        -:    1:
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <assert.h>
        -:    7:#include "rngs.h"
        -:    8:
        -:    9:
function main called 2 returned 100% blocks executed 90%
        2:   10:int main(){
        -:   11:        int r;
        -:   12:        int check;
        -:   13:	
        2:   14:	int count=0;
        2:   15:	int count2=0;
        -:   16:
        2:   17:        printf("adventurer unit test ----\n");
call    0 returned 100%
        2:   18:        int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   19:               remodel, smithy, village, baron, great_hall};
        -:   20:
        -:   21:        struct gameState G;
        -:   22:
        2:   23:         r = initializeGame(2, k, 1, &G);
call    0 returned 100%
        -:   24:
        -:   25:       	int i; 
     1002:   26:	for(i=0; i< sizeof(G.hand[0])/4;i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     1000:   27:		if(G.hand[0][i] == copper){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        8:   28:			count++;	
        -:   29:		}
        -:   30:	
        -:   31:	}
        -:   32:	
        2:   33:	check = cardEffect(adventurer,0,0,0,&G,0,0);
call    0 returned 100%
        -:   34:	
     1002:   35:        for(i=0; i< sizeof(G.hand[0])/4;i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     1000:   36:                if(G.hand[0][i] == copper){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       12:   37:                        count2++;
        -:   38:                }
        -:   39:
        -:   40:        }
        -:   41:	
        2:   42:        if(count+2 == count2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   43:
        2:   44:                printf("PASS\n");
call    0 returned 100%
        2:   45:                return 0;
        -:   46:
        -:   47:        }
        -:   48:
        -:   49:        else{
    #####:   50:                printf("FAILED\n");
call    0 never executed
    #####:   51:                return -1;
        -:   52:        }
        -:   53:
        -:   54:        return 0;
        -:   55:
        -:   56:}
        -:   57:

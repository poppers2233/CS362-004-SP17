        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <assert.h>
        -:    7:#include "rngs.h"
        -:    8:#include <stdlib.h>
        -:    9:#include <time.h>
        -:   10:
function main called 2 returned 100% blocks executed 85%
        2:   11:int main(){
        -:   12:	
        2:   13:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   14:	
        -:   15:        int r;
        -:   16:        int check;
        2:   17:	int RnumChecks = (rand() % 20) + 1;
call    0 returned 100%
        -:   18:	
        2:   19:	printf("Random num checks = %i\n",RnumChecks);
call    0 returned 100%
        2:   20:	struct gameState states[RnumChecks];
        2:   21:	int allPass = 1;
        -:   22:
        2:   23:        int count=0;
        2:   24:        int count2=0;
        -:   25:
        2:   26:        printf("adventurer unit random  test ----\n");
call    0 returned 100%
        2:   27:        int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   28:               remodel, smithy, village, baron, great_hall};
        -:   29:	
        -:   30:        int i;
        -:   31:	int a;	
        8:   32:	for(a=0; a<RnumChecks; a++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        6:   33:		count = 0;
        6:   34:		count2 = 0;
        6:   35:		r = initializeGame(2, k, 1, &states[a]);
call    0 returned 100%
        -:   36:		
     3006:   37:        for(i=0; i< sizeof(states[a].hand[0])/4;i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     3000:   38:                if(states[a].hand[0][i] == copper){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       24:   39:                        count++;
        -:   40:
        -:   41:                }
        -:   42:
        -:   43:        }
        6:   44:        check = cardEffect(adventurer,0,0,0,&states[a],0,0);
call    0 returned 100%
        -:   45:
     3006:   46:        for(i=0; i< sizeof(states[a].hand[0])/4;i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     3000:   47:                if(states[a].hand[0][i] == copper){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       36:   48:                        count2++;
        -:   49:                }
        -:   50:
        -:   51:        }
        -:   52:
        6:   53:        if(count+2 == count2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   54:
        6:   55:                printf("PASS\n");
call    0 returned 100%
        -:   56:
        -:   57:        }
        -:   58:
        -:   59:        else{
    #####:   60:                printf("FAILED\n");
call    0 never executed
    #####:   61:		allPass = 0;
        -:   62:        }
        6:   63:		printf("count  = %i\n",count);
call    0 returned 100%
        6:   64:		printf("count2 = %i\n",count2);
call    0 returned 100%
        -:   65:		
        -:   66:	}
        -:   67:	
        2:   68:	if(allPass == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   69:        	return 0;
        -:   70:	
    #####:   71:	if(allPass == 0)
branch  0 never executed
branch  1 never executed
    #####:   72:		return -1;
        -:   73:	
    #####:   74:	return -1;
        -:   75:}
